/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Login;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public final class Order extends javax.swing.JFrame {

    /**
     * Creates new form Order
     */
    private int uPrice;
    private int tPrice;
    private int credite; // customer credite to identify top customer
    private String day;
    private String month;
    private String year;
    private String time;
    private String date;
    private int vat=2;
    private String CustomerID;
    private String name;
    private String address;
    private String foodList;
    
    public Order() {
        initComponents();
        updateCombooD();
        showDate();
        showTime();
    }
    
     // To show System date 10/07/2022 ARONOCK
    void showDate(){
        Date d=new Date();
        SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
        //jDate.setText(s.format(d)); // show date in Login Panel
        date=s.format(d);
        SimpleDateFormat dayFormat = new SimpleDateFormat("dd");
        day = dayFormat.format(d);

        SimpleDateFormat monthFormat = new SimpleDateFormat("MM");
        month = monthFormat .format(d);
        
        SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");
        year = yearFormat .format(d);
    }
    //To show System time 10/07/2022 ARONOCK
    void showTime(){
    new Timer(0, (ActionEvent e) -> {
        Date d=new Date();
        SimpleDateFormat s=new SimpleDateFormat("hh:mm:ss a");
        //jTime.setText(s.format(d)); // Show time in Login Panel 10/07/2022 ARONOCK
        time=s.format(d);
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }).start();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @param Name
     * @param Phone
     * @param Address
     */
    
    public void customer_info(String Name,String Phone,String Address){
        //System.out.println(Name);
        //System.out.println(Phone);
        //System.out.println(Address);
        customerInfo.setText(Name+" "+Phone+" "+Address);
        CustomerID=Phone;
        name=Name;
        address=Address;
    }
    
    void updateCombooD(){ // update value datebase to combobox
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                //Connection conn = DriverManager.getConnection("jdbc:sqlserver://DESKTOP-OECCDJF\\SQLEXPRESS;databaseName=RMS","sa","alphacoders4T4");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "select * from FOOD_MENU ;";
                ResultSet rs = stmt.executeQuery(qrry);
                while(rs.next()){
                    FoodListComboBox.addItem(rs.getString("DISH_NAME"));
                }
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
    }
    
     void readFromFoodMenu(){ // This function has been created to read unit price form food menu
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "select * from FOOD_MENU WHERE DISH_NAME="+"'"+FoodListComboBox.getSelectedItem().toString()+"'"+";";
                ResultSet rs = stmt.executeQuery(qrry);
                while(rs.next()){
                    String s=rs.getString("PRICE");
                    uPrice=Integer.parseInt(s);
                }
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
    }
     
    void AddTempBill(){  // This will create temporary bill in database system
        String s=quantityTextBox.getText();
        int Q=Integer.parseInt(s);
        int Price= Q*uPrice;
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
            Statement stmt = conn.createStatement();
            String qrry;
            qrry = "INSERT INTO TEMP_BILL VALUES("+"'"+FoodListComboBox.getSelectedItem().toString()+"'"+","+Q+","+uPrice+","+Price+");";
            boolean gotResults=stmt.execute(qrry);
            ResultSet rs = null;
            if(!gotResults){
                System.out.println("No results returned");
            }
            else {
                rs = stmt.getResultSet();
                }
            
            //JOptionPane.showMessageDialog(rootPane,"Done");
            
        }catch(ClassNotFoundException | SQLException ex){
            JOptionPane.showMessageDialog(rootPane,ex);
        }
        orgerList();
    }
    
    void orgerList(){ // Order List that will show in J table sory for wrong spelling
        DefaultTableModel MenuDetail =(DefaultTableModel)OrderList.getModel();
        MenuDetail.setRowCount(0);
        
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "select * from TEMP_BILL;";
                ResultSet rs = stmt.executeQuery(qrry);
                while(rs.next()){
                    String ITEM = rs.getString("ITEM");
                    int QUANTITY = rs.getInt("QUANTITY");
                    int UNIT_PRICE = rs.getInt("UNIT_PRICE");
                    int TOTAL = rs.getInt("TOTAL");
                   
               
                    MenuDetail.addRow(new Object[]{ITEM ,QUANTITY,UNIT_PRICE,TOTAL});
                }
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
    }
    
    void foodList(){ // Order List that will show in J table sory for wrong spelling
      
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "select * from TEMP_BILL;";
                ResultSet rs = stmt.executeQuery(qrry);
                while(rs.next()){
                    String ITEM = rs.getString("ITEM");
                    foodList=foodList+","+ITEM;
                }
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
    }
    
    void DellTempBill(){ // this will delete item from j table and database
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "DELETE from TEMP_BILL WHERE ITEM="+"'"+FoodListComboBox.getSelectedItem().toString()+"'"+"AND QUANTITY="+quantityTextBox.getText()+";";
                boolean gotResults=stmt.execute(qrry);
                ResultSet rs = null;
                if(!gotResults){
                    System.out.println("No results returned");
                }
                else {
                    rs = stmt.getResultSet();
                }
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
        orgerList();
    }
    void TotalBIll(){ // Totable bill will calculate using temp bill database 
         try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "SELECT SUM(TOTAL) AS TotalBill FROM TEMP_BILL;";
                ResultSet rs = stmt.executeQuery(qrry);
                //rs.next();
                while(rs.next()){
                    String s=rs.getString("TotalBill");
                    tPrice=Integer.parseInt(s);
                    System.out.println(tPrice);
                }
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
    }
    void FinalBillInfo(){ // final total bill will genarate 
         String serverID="Online Service";
         //String Table= "Null";
         String paymentMethod=PaymentMethodComboBox.getSelectedItem().toString(); 
         ToBills(CustomerID,serverID,"Online Service", (int) (tPrice+tPrice*(double)((vat*1.0)/100)),paymentMethod,year,month,time);
    }
    void ToBills(String CustomerID,String serverID,String id,int paid,String paymentMethod,String year,String month,String time){
        
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "INSERT INTO BILLS VALUES("+"'"+CustomerID+"'"+","+"'"+serverID+"'"+","+"'"+id+"'"+","+paid+","+"'"+paymentMethod+"'"+","+Integer.parseInt(year)+","+Integer.parseInt(month)+","+"'"+date+"'"+");";
                boolean gotResults=stmt.execute(qrry);
                ResultSet rs = null;
                if(!gotResults){
                    System.out.println("No results returned");
                }
                else {
                    rs = stmt.getResultSet();
                }
                JOptionPane.showMessageDialog(null,"Done");
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                } 
       
    }
    
    void readFromCustomer(){ // Customer old credite will read
         try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID ="+"'"+CustomerID+"';";
                ResultSet rs = stmt.executeQuery(qrry);
                //rs.next();
                while(rs.next()){
                    String s=rs.getString("CREDIT");
                    credite=Integer.parseInt(s);
                   // System.out.println(credite);
                }
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
    }
    
    void customer(){ // credite will be update to the old customer and for new customer new account will be created
        readFromCustomer();
       
        int tmp=(int) (tPrice+tPrice*(double)((vat*1.0)/100));
        int sum=credite+tmp;
           //System.out.println("Yes"+tmp);
           //System.out.println("->"+credite);
        try{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
            Statement stmt = conn.createStatement();
            String qrry;
            qrry = "UPDATE CUSTOMER SET CREDIT="+sum+"WHERE CUSTOMER_ID ="+"'"+CustomerID+"'"+";";
            boolean gotResults=stmt.execute(qrry);
            ResultSet rs = null;
            if(!gotResults){
                System.out.println("No results returned");
                }
            else {
                rs = stmt.getResultSet();
                }
                JOptionPane.showMessageDialog(null,"Done");
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
     
      
    }
    
    
    void DeleteAllTempBIll(){// all data will delete from j table and temp data base
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "DELETE from TEMP_BILL;";
                boolean gotResults=stmt.execute(qrry);
                ResultSet rs = null;
                if(!gotResults){
                    System.out.println("No results returned");
                }
                else {
                    rs = stmt.getResultSet();
                }
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                }
        orgerList();
        quantityTextBox.setText(null);
    }
    void printBill(){
        
        pBill.setText(pBill.getText()+"Date: "+date+"\n");
        pBill.setText(pBill.getText()+"Time: "+time+"\n");
        pBill.setText(pBill.getText()+"Cashier ID: "+"Online Service"+"\n");
        pBill.setText(pBill.getText()+"Customer ID: "+CustomerID+"\n");
        pBill.setText(pBill.getText()+"=========================RMS======================================\n");
        DefaultTableModel MenuDetail =(DefaultTableModel)OrderList.getModel();
        //MenuDetail.setRowCount(0);
        pBill.setText(pBill.getText()+"ITEM"+"\t"+"QUANTITY"+"\t"+"UNIT_PRICE"+"\t"+"TOTAL"+"\n");
        for(int i=0;i<OrderList.getRowCount();i++){
            String ITEM= OrderList.getValueAt(i,0).toString();
            String QUANTITY= OrderList.getValueAt(i,1).toString();
            String UNIT_PRICE= OrderList.getValueAt(i,2).toString();
            String TOTAL= OrderList.getValueAt(i,3).toString();
         pBill.setText(pBill.getText()+ITEM+"\t"+QUANTITY+"\t"+UNIT_PRICE+"\t"+TOTAL+"\n");
        }
        pBill.setText(pBill.getText()+"===========================Thank You================================\n");
        pBill.setText(pBill.getText()+"Total Bill:"+String.valueOf(tPrice+tPrice*(double)((vat*1.0)/100))+" ("+vat+"%Vat Included)\n");
        pBill.setText(pBill.getText()+"Payment Method:"+PaymentMethodComboBox.getSelectedItem().toString()+"\n");
        
        
        
    }
    void onlineOrder(){
        try{
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection ("jdbc:sqlserver://localhost:1433; databaseName=RMS; user=sa; password=123456");
                Statement stmt = conn.createStatement();
                String qrry;
                qrry = "INSERT INTO ONLINE_ORDER VALUES("+"'"+CustomerID+"'"+","+"'"+name+"'"+","+"'"+foodList+"'"+","+"'"+"NO"+"'"+","+tPrice+","+"'"+date+"'"+","+"'"+time+"'"+","+"'"+address+"'"+","+"'"+CustomerID+"'"+");";
                boolean gotResults=stmt.execute(qrry);
                ResultSet rs = null;
                if(!gotResults){
                    System.out.println("No results returned");
                }
                else {
                    rs = stmt.getResultSet();
                }
                JOptionPane.showMessageDialog(null,"Done");
            }catch(HeadlessException | ClassNotFoundException | SQLException ex){
                JOptionPane.showMessageDialog(null,"Error in Connectivity "+ex);
                } 
       
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        DeleteAll = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        FoodListComboBox = new javax.swing.JComboBox<>();
        quantityTextBox = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrderList = new javax.swing.JTable();
        customerInfo = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Delete_all = new javax.swing.JButton();
        order = new javax.swing.JButton();
        PaymentMethodComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pBill = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        DeleteAll.setText("Delete All");
        DeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAllActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Order");

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        FoodListComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TEMP" }));
        FoodListComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FoodListComboBoxActionPerformed(evt);
            }
        });

        quantityTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTextBoxActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        add.setText("ADD");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        remove.setText("Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        OrderList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Quantity", "Unit Price", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(OrderList);

        customerInfo.setFont(new java.awt.Font("Trajan Pro", 0, 13)); // NOI18N
        customerInfo.setText("Customer Info");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Order");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Quantity");

        Delete_all.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Delete_all.setText("Delete All");
        Delete_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_allActionPerformed(evt);
            }
        });

        order.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        order.setText("Order");
        order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderActionPerformed(evt);
            }
        });

        PaymentMethodComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PaymentMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Checks", "Debit cards", "Credit cards", "bkash" }));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Payment Method:");

        jScrollPane3.setViewportView(pBill);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(remove))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quantityTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FoodListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(customerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 20, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PaymentMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Delete_all, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(order, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(customerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(FoodListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(147, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(Delete_all, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PaymentMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(order, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(54, 54, 54)
                .addComponent(DeleteAll)
                .addGap(221, 221, 221))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(306, 306, 306)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAllActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_DeleteAllActionPerformed

    private void Delete_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_allActionPerformed
        // TODO add your handling code here:
        DeleteAllTempBIll();
    }//GEN-LAST:event_Delete_allActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        // TODO add your handling code here:
        DellTempBill();
    }//GEN-LAST:event_removeActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        readFromFoodMenu();
        AddTempBill();
    }//GEN-LAST:event_addActionPerformed

    private void FoodListComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FoodListComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FoodListComboBoxActionPerformed

    private void orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderActionPerformed
        // TODO add your handling code here:
        foodList();
        onlineOrder();
        printBill();
        DeleteAllTempBIll();
    }//GEN-LAST:event_orderActionPerformed

    private void quantityTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTextBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Order().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteAll;
    private javax.swing.JButton Delete_all;
    private javax.swing.JComboBox<String> FoodListComboBox;
    private javax.swing.JTable OrderList;
    private javax.swing.JComboBox<String> PaymentMethodComboBox;
    private javax.swing.JButton add;
    private javax.swing.JLabel customerInfo;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton order;
    private javax.swing.JTextPane pBill;
    private javax.swing.JTextField quantityTextBox;
    private javax.swing.JButton remove;
    // End of variables declaration//GEN-END:variables
}
